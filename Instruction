# Инструкция для работы с Git и удалёнными репозиториями

*Полезные ссылки:*
https://habr.com/ru/post/541258/
https://habr.com/ru/post/542616/

## Что такое Git?
**Git - это одна из реализаций распределённых систем контроля версий, имеющая как и локальные, так и удалённые репозитории. Является самой популярной реализацией систем контроля версий в мире.**

Cуществуют и отдельные программы по работе с Git. Например:
* GitHub Desktop
* Sourcetree
* GitKraken

## Подготовка репозитория
Для создание репозитория необходимо выполнить команду *git init*  в папке с репозиторием и у Вас создаться репозиторий (появится скрытая папка .git)

## Создание коммитов

### Git add
Для добавления измений в коммит используется команда *git add*. Чтобы использовать команду *git add* напишите *git add <имя файла>*

### Просмотр состояния репозитория
Для того, чтобы посмотреть состояние репозитория используется команда *git status*. Для этого необходимо в папке с репозиторием написать *git status*, и Вы увидите были ли измения в файлах, или их не было.

### Создание коммитов
Для того, чтобы создать коммит(сохранение) необходимо выполнить команду *git commit*. Выполняется она так: *git commit -m "<сообщение к коммиту>*. Все файлы для коммита должны быть ***ДОБАВЛЕНЫ*** и сообщение к коммиту писать ***ОБЯЗАТЕЛЬНО***.

*Не стоит после каждого изменения делать commit*

Чаще всего их создают когда: 

* Создан новый функционал
* Добавлен новый блок на верстке
* Исправлены ошибке по коду
* Вы завершили рабочий день и хотите сохранить код

Совет. Каждый коммит, лучше заливать сразу в удаленный репозиторий. Никто не застрахован, поломки собственного ПК. Поэтому чтобы не потерять все наработки, не забывайте сливать ваши изменения на GitHub.

## Перемещение между сохранениями
Для того, чтобы перемещаться между коммитами, используется команда *git checkout*. Используется она в папке с пепозиторием следующим образом: *git checkout <номер коммита>*

## Журнал изменений
Для того, чтобы посмтреть все сделанные изменения в репозитории, используется команда *git log*. Для этого достаточно выполнить команду *git log* в папке с репозиторием

Если ввести этот код, то можно представить log (журнал) в грасивом виде:
git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short

## Ветки в Git

### Создание ветки

Для того, чтобы создать ветку, используется команда *git branch*. Делается это следующим образом в папке с репозиторием: *git branch <название новой ветки>*

## Слияние веток

Для того чтобы дабавить ветку в текущую ветку используется команда *git merge <name branch>*

Перед тем как сливать новый merge, стоит обновить локальную ветку master, во избежания дальнейших проблем.

## Удаление веток
Для удаления ветки ввести команду "git branch -d 'name branch'"

При создании новой ветки, старайтесь называть ее кратким и ёмким именем. Чтобы сразу было понятно, что именно изменялось по проекту.

Текст для слияния commit
Текст для слияния merge

Практика и вспомогательные инструменты
Для улучшения ваших навыков, ссылка на полезный тренажер с заданиями:

https://learngitbranching.js.org/?locale=ru_RU

Для удобства использования в Visual Studio Code, рекомендуется поставить это расширение, которое визуализирует ваши ветки и commit, и помогает с ними работать: 

https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph

##Работа с GitHub

Мы можем проводить совместную работу в репозитории на компьютере и на сайте GitHub. 

1. Мы создаем репозиторий на гит хабе
2. Создаем папку на рабочем столе
3. Мы делаем git clone репозитория в гит хабе в ВСК
4. Но затем еще надо перейти в папку с нужным файлом на гит хабе, для этого: 
cd «название папки с гит хаба»
5. Дальше уже можем просто создавать, коммитить и пушить 
Этот способ удобнее чем настраивать репозиторий удаленно, как было в прошлой инструкции
6. Чтобы создать новую ветку на гитхабе с компьютера 
$ git push --set-upstream origin Gleb
7. После того, как мы внесем новую ветку, добавим в нее изменения и загрузим на гит хаб, мы можем предложить нашему тимлиду добавить изменения с нашей ветки в ветку мастер через окно Compare and pull request
